/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.AircraftMeta');
goog.provide('proto.AircraftMeta.AddrType');
goog.provide('proto.AircraftMeta.AirGround');
goog.provide('proto.AircraftMeta.Emergency');
goog.provide('proto.AircraftMeta.NavModes');
goog.provide('proto.AircraftMeta.SilType');
goog.provide('proto.AircraftMeta.ValidSource');

goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AircraftMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AircraftMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AircraftMeta.displayName = 'proto.AircraftMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AircraftMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.AircraftMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AircraftMeta} msg The msg instance to transform.
 * @return {!Object}
 */
proto.AircraftMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    addr: msg.getAddr(),
    flight: msg.getFlight(),
    squawk: msg.getSquawk(),
    category: msg.getCategory(),
    altBaro: msg.getAltBaro(),
    magHeading: msg.getMagHeading(),
    ias: msg.getIas(),
    lat: msg.getLat(),
    lon: msg.getLon(),
    messages: msg.getMessages(),
    seen: msg.getSeen(),
    rssi: msg.getRssi(),
    airGround: msg.getAirGround(),
    altGeom: msg.getAltGeom(),
    baroRate: msg.getBaroRate(),
    geomRate: msg.getGeomRate(),
    gs: msg.getGs(),
    tas: msg.getTas(),
    mach: msg.getMach(),
    trueHeading: msg.getTrueHeading(),
    track: msg.getTrack(),
    trackRate: msg.getTrackRate(),
    roll: msg.getRoll(),
    navQnh: msg.getNavQnh(),
    navAltitudeMcp: msg.getNavAltitudeMcp(),
    navAltitudeFms: msg.getNavAltitudeFms(),
    navHeading: msg.getNavHeading(),
    nic: msg.getNic(),
    rc: msg.getRc(),
    version: msg.getVersion(),
    nicBaro: msg.getNicBaro(),
    nacP: msg.getNacP(),
    nacV: msg.getNacV(),
    sil: msg.getSil(),
    seenPos: msg.getSeenPos(),
    alert: msg.getAlert(),
    spi: msg.getSpi(),
    gva: msg.getGva(),
    sda: msg.getSda(),
    addrType: msg.getAddrType(),
    emergency: msg.getEmergency(),
    silType: msg.getSilType(),
    navModes: (f = msg.getNavModes()) && proto.AircraftMeta.NavModes.toObject(includeInstance, f),
    mlat: (f = msg.getMlat()) && proto.AircraftMeta.ValidSource.toObject(includeInstance, f),
    tisb: (f = msg.getTisb()) && proto.AircraftMeta.ValidSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.AircraftMeta} The clone.
 */
proto.AircraftMeta.prototype.cloneMessage = function() {
  return /** @type {!proto.AircraftMeta} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 addr = 1;
 * @return {number}
 */
proto.AircraftMeta.prototype.getAddr = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setAddr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string flight = 2;
 * @return {string}
 */
proto.AircraftMeta.prototype.getFlight = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.AircraftMeta.prototype.setFlight = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 squawk = 3;
 * @return {number}
 */
proto.AircraftMeta.prototype.getSquawk = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setSquawk = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 category = 4;
 * @return {number}
 */
proto.AircraftMeta.prototype.getCategory = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setCategory = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 alt_baro = 5;
 * @return {number}
 */
proto.AircraftMeta.prototype.getAltBaro = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setAltBaro = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 mag_heading = 6;
 * @return {number}
 */
proto.AircraftMeta.prototype.getMagHeading = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setMagHeading = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 ias = 7;
 * @return {number}
 */
proto.AircraftMeta.prototype.getIas = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setIas = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional double lat = 8;
 * @return {number}
 */
proto.AircraftMeta.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setLat = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional double lon = 9;
 * @return {number}
 */
proto.AircraftMeta.prototype.getLon = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setLon = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint64 messages = 10;
 * @return {number}
 */
proto.AircraftMeta.prototype.getMessages = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setMessages = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional uint64 seen = 11;
 * @return {number}
 */
proto.AircraftMeta.prototype.getSeen = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setSeen = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional float rssi = 12;
 * @return {number}
 */
proto.AircraftMeta.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 12, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setRssi = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional AirGround air_ground = 15;
 * @return {!proto.AircraftMeta.AirGround}
 */
proto.AircraftMeta.prototype.getAirGround = function() {
  return /** @type {!proto.AircraftMeta.AirGround} */ (jspb.Message.getFieldProto3(this, 15, 0));
};


/** @param {!proto.AircraftMeta.AirGround} value  */
proto.AircraftMeta.prototype.setAirGround = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional int32 alt_geom = 20;
 * @return {number}
 */
proto.AircraftMeta.prototype.getAltGeom = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 20, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setAltGeom = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional int32 baro_rate = 21;
 * @return {number}
 */
proto.AircraftMeta.prototype.getBaroRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 21, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setBaroRate = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional int32 geom_rate = 22;
 * @return {number}
 */
proto.AircraftMeta.prototype.getGeomRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 22, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setGeomRate = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional uint32 gs = 23;
 * @return {number}
 */
proto.AircraftMeta.prototype.getGs = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 23, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setGs = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * optional uint32 tas = 24;
 * @return {number}
 */
proto.AircraftMeta.prototype.getTas = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 24, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setTas = function(value) {
  jspb.Message.setField(this, 24, value);
};


/**
 * optional float mach = 25;
 * @return {number}
 */
proto.AircraftMeta.prototype.getMach = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 25, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setMach = function(value) {
  jspb.Message.setField(this, 25, value);
};


/**
 * optional int32 true_heading = 26;
 * @return {number}
 */
proto.AircraftMeta.prototype.getTrueHeading = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 26, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setTrueHeading = function(value) {
  jspb.Message.setField(this, 26, value);
};


/**
 * optional int32 track = 27;
 * @return {number}
 */
proto.AircraftMeta.prototype.getTrack = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 27, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setTrack = function(value) {
  jspb.Message.setField(this, 27, value);
};


/**
 * optional float track_rate = 28;
 * @return {number}
 */
proto.AircraftMeta.prototype.getTrackRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 28, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setTrackRate = function(value) {
  jspb.Message.setField(this, 28, value);
};


/**
 * optional float roll = 29;
 * @return {number}
 */
proto.AircraftMeta.prototype.getRoll = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 29, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setRoll = function(value) {
  jspb.Message.setField(this, 29, value);
};


/**
 * optional float nav_qnh = 30;
 * @return {number}
 */
proto.AircraftMeta.prototype.getNavQnh = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 30, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setNavQnh = function(value) {
  jspb.Message.setField(this, 30, value);
};


/**
 * optional int32 nav_altitude_mcp = 31;
 * @return {number}
 */
proto.AircraftMeta.prototype.getNavAltitudeMcp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 31, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setNavAltitudeMcp = function(value) {
  jspb.Message.setField(this, 31, value);
};


/**
 * optional int32 nav_altitude_fms = 32;
 * @return {number}
 */
proto.AircraftMeta.prototype.getNavAltitudeFms = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 32, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setNavAltitudeFms = function(value) {
  jspb.Message.setField(this, 32, value);
};


/**
 * optional int32 nav_heading = 33;
 * @return {number}
 */
proto.AircraftMeta.prototype.getNavHeading = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 33, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setNavHeading = function(value) {
  jspb.Message.setField(this, 33, value);
};


/**
 * optional uint32 nic = 34;
 * @return {number}
 */
proto.AircraftMeta.prototype.getNic = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 34, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setNic = function(value) {
  jspb.Message.setField(this, 34, value);
};


/**
 * optional uint32 rc = 35;
 * @return {number}
 */
proto.AircraftMeta.prototype.getRc = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 35, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setRc = function(value) {
  jspb.Message.setField(this, 35, value);
};


/**
 * optional int32 version = 36;
 * @return {number}
 */
proto.AircraftMeta.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 36, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 36, value);
};


/**
 * optional uint32 nic_baro = 37;
 * @return {number}
 */
proto.AircraftMeta.prototype.getNicBaro = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 37, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setNicBaro = function(value) {
  jspb.Message.setField(this, 37, value);
};


/**
 * optional uint32 nac_p = 38;
 * @return {number}
 */
proto.AircraftMeta.prototype.getNacP = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 38, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setNacP = function(value) {
  jspb.Message.setField(this, 38, value);
};


/**
 * optional uint32 nac_v = 39;
 * @return {number}
 */
proto.AircraftMeta.prototype.getNacV = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 39, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setNacV = function(value) {
  jspb.Message.setField(this, 39, value);
};


/**
 * optional uint32 sil = 40;
 * @return {number}
 */
proto.AircraftMeta.prototype.getSil = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 40, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setSil = function(value) {
  jspb.Message.setField(this, 40, value);
};


/**
 * optional uint32 seen_pos = 41;
 * @return {number}
 */
proto.AircraftMeta.prototype.getSeenPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 41, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setSeenPos = function(value) {
  jspb.Message.setField(this, 41, value);
};


/**
 * optional bool alert = 42;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.prototype.getAlert = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 42, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.prototype.setAlert = function(value) {
  jspb.Message.setField(this, 42, value);
};


/**
 * optional bool spi = 43;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.prototype.getSpi = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 43, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.prototype.setSpi = function(value) {
  jspb.Message.setField(this, 43, value);
};


/**
 * optional uint32 gva = 44;
 * @return {number}
 */
proto.AircraftMeta.prototype.getGva = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 44, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setGva = function(value) {
  jspb.Message.setField(this, 44, value);
};


/**
 * optional uint32 sda = 45;
 * @return {number}
 */
proto.AircraftMeta.prototype.getSda = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 45, 0));
};


/** @param {number} value  */
proto.AircraftMeta.prototype.setSda = function(value) {
  jspb.Message.setField(this, 45, value);
};


/**
 * optional AddrType addr_type = 100;
 * @return {!proto.AircraftMeta.AddrType}
 */
proto.AircraftMeta.prototype.getAddrType = function() {
  return /** @type {!proto.AircraftMeta.AddrType} */ (jspb.Message.getFieldProto3(this, 100, 0));
};


/** @param {!proto.AircraftMeta.AddrType} value  */
proto.AircraftMeta.prototype.setAddrType = function(value) {
  jspb.Message.setField(this, 100, value);
};


/**
 * optional Emergency emergency = 101;
 * @return {!proto.AircraftMeta.Emergency}
 */
proto.AircraftMeta.prototype.getEmergency = function() {
  return /** @type {!proto.AircraftMeta.Emergency} */ (jspb.Message.getFieldProto3(this, 101, 0));
};


/** @param {!proto.AircraftMeta.Emergency} value  */
proto.AircraftMeta.prototype.setEmergency = function(value) {
  jspb.Message.setField(this, 101, value);
};


/**
 * optional SilType sil_type = 102;
 * @return {!proto.AircraftMeta.SilType}
 */
proto.AircraftMeta.prototype.getSilType = function() {
  return /** @type {!proto.AircraftMeta.SilType} */ (jspb.Message.getFieldProto3(this, 102, 0));
};


/** @param {!proto.AircraftMeta.SilType} value  */
proto.AircraftMeta.prototype.setSilType = function(value) {
  jspb.Message.setField(this, 102, value);
};


/**
 * optional NavModes nav_modes = 150;
 * @return {proto.AircraftMeta.NavModes}
 */
proto.AircraftMeta.prototype.getNavModes = function() {
  return /** @type{proto.AircraftMeta.NavModes} */ (
    jspb.Message.getWrapperField(this, proto.AircraftMeta.NavModes, 150));
};


/** @param {proto.AircraftMeta.NavModes|undefined} value  */
proto.AircraftMeta.prototype.setNavModes = function(value) {
  jspb.Message.setWrapperField(this, 150, value);
};


proto.AircraftMeta.prototype.clearNavModes = function() {
  this.setNavModes(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.AircraftMeta.prototype.hasNavModes = function() {
  return jspb.Message.getField(this, 150) != null;
};


/**
 * optional ValidSource mlat = 151;
 * @return {proto.AircraftMeta.ValidSource}
 */
proto.AircraftMeta.prototype.getMlat = function() {
  return /** @type{proto.AircraftMeta.ValidSource} */ (
    jspb.Message.getWrapperField(this, proto.AircraftMeta.ValidSource, 151));
};


/** @param {proto.AircraftMeta.ValidSource|undefined} value  */
proto.AircraftMeta.prototype.setMlat = function(value) {
  jspb.Message.setWrapperField(this, 151, value);
};


proto.AircraftMeta.prototype.clearMlat = function() {
  this.setMlat(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.AircraftMeta.prototype.hasMlat = function() {
  return jspb.Message.getField(this, 151) != null;
};


/**
 * optional ValidSource tisb = 152;
 * @return {proto.AircraftMeta.ValidSource}
 */
proto.AircraftMeta.prototype.getTisb = function() {
  return /** @type{proto.AircraftMeta.ValidSource} */ (
    jspb.Message.getWrapperField(this, proto.AircraftMeta.ValidSource, 152));
};


/** @param {proto.AircraftMeta.ValidSource|undefined} value  */
proto.AircraftMeta.prototype.setTisb = function(value) {
  jspb.Message.setWrapperField(this, 152, value);
};


proto.AircraftMeta.prototype.clearTisb = function() {
  this.setTisb(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.AircraftMeta.prototype.hasTisb = function() {
  return jspb.Message.getField(this, 152) != null;
};


/**
 * @enum {number}
 */
proto.AircraftMeta.AirGround = {
  AG_INVALID: 0,
  AG_GROUND: 1,
  AG_AIRBORNE: 2,
  AG_UNCERTAIN: 3
};

/**
 * @enum {number}
 */
proto.AircraftMeta.AddrType = {
  ADDR_ADSB_ICAO: 0,
  ADDR_ADSB_ICAO_NT: 1,
  ADDR_ADSR_ICAO: 2,
  ADDR_TISB_ICAO: 3,
  ADDR_ADSB_OTHER: 4,
  ADDR_ADSR_OTHER: 5,
  ADDR_TISB_TRACKFILE: 6,
  ADDR_TISB_OTHER: 7,
  ADDR_MODE_A: 8,
  ADDR_UNKNOWN: 9
};

/**
 * @enum {number}
 */
proto.AircraftMeta.Emergency = {
  EMERGENCY_NONE: 0,
  EMERGENCY_GENERAL: 1,
  EMERGENCY_LIFEGUARD: 2,
  EMERGENCY_MINFUEL: 3,
  EMERGENCY_NORDO: 4,
  EMERGENCY_UNLAWFUL: 5,
  EMERGENCY_DOWNED: 6,
  EMERGENCY_RESERVED: 7
};

/**
 * @enum {number}
 */
proto.AircraftMeta.SilType = {
  SIL_INVALID: 0,
  SIL_UNKNOWN: 1,
  SIL_PER_SAMPLE: 2,
  SIL_PER_HOUR: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AircraftMeta.NavModes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AircraftMeta.NavModes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AircraftMeta.NavModes.displayName = 'proto.AircraftMeta.NavModes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AircraftMeta.NavModes.prototype.toObject = function(opt_includeInstance) {
  return proto.AircraftMeta.NavModes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AircraftMeta.NavModes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.AircraftMeta.NavModes.toObject = function(includeInstance, msg) {
  var f, obj = {
    autopilot: msg.getAutopilot(),
    vnav: msg.getVnav(),
    althold: msg.getAlthold(),
    approach: msg.getApproach(),
    lnav: msg.getLnav(),
    tcas: msg.getTcas()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.AircraftMeta.NavModes} The clone.
 */
proto.AircraftMeta.NavModes.prototype.cloneMessage = function() {
  return /** @type {!proto.AircraftMeta.NavModes} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool autopilot = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.NavModes.prototype.getAutopilot = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.NavModes.prototype.setAutopilot = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool vnav = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.NavModes.prototype.getVnav = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.NavModes.prototype.setVnav = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool althold = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.NavModes.prototype.getAlthold = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.NavModes.prototype.setAlthold = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool approach = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.NavModes.prototype.getApproach = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.NavModes.prototype.setApproach = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool lnav = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.NavModes.prototype.getLnav = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 5, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.NavModes.prototype.setLnav = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool tcas = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.NavModes.prototype.getTcas = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 6, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.NavModes.prototype.setTcas = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AircraftMeta.ValidSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AircraftMeta.ValidSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AircraftMeta.ValidSource.displayName = 'proto.AircraftMeta.ValidSource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AircraftMeta.ValidSource.prototype.toObject = function(opt_includeInstance) {
  return proto.AircraftMeta.ValidSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AircraftMeta.ValidSource} msg The msg instance to transform.
 * @return {!Object}
 */
proto.AircraftMeta.ValidSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    callsign: msg.getCallsign(),
    altitude: msg.getAltitude(),
    altGeom: msg.getAltGeom(),
    gs: msg.getGs(),
    ias: msg.getIas(),
    tas: msg.getTas(),
    mach: msg.getMach(),
    track: msg.getTrack(),
    trackRate: msg.getTrackRate(),
    roll: msg.getRoll(),
    magHeading: msg.getMagHeading(),
    trueHeading: msg.getTrueHeading(),
    baroRate: msg.getBaroRate(),
    geomRate: msg.getGeomRate(),
    squawk: msg.getSquawk(),
    emergency: msg.getEmergency(),
    navQnh: msg.getNavQnh(),
    navAltitudeMcp: msg.getNavAltitudeMcp(),
    navAltitudeFms: msg.getNavAltitudeFms(),
    navHeading: msg.getNavHeading(),
    navModes: msg.getNavModes(),
    lat: msg.getLat(),
    lon: msg.getLon(),
    nic: msg.getNic(),
    rc: msg.getRc(),
    nicBaro: msg.getNicBaro(),
    nacP: msg.getNacP(),
    nacV: msg.getNacV(),
    sil: msg.getSil(),
    silType: msg.getSilType(),
    gva: msg.getGva(),
    sda: msg.getSda()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.AircraftMeta.ValidSource} The clone.
 */
proto.AircraftMeta.ValidSource.prototype.cloneMessage = function() {
  return /** @type {!proto.AircraftMeta.ValidSource} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool callsign = 100;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getCallsign = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 100, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setCallsign = function(value) {
  jspb.Message.setField(this, 100, value);
};


/**
 * optional bool altitude = 101;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getAltitude = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 101, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setAltitude = function(value) {
  jspb.Message.setField(this, 101, value);
};


/**
 * optional bool alt_geom = 102;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getAltGeom = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 102, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setAltGeom = function(value) {
  jspb.Message.setField(this, 102, value);
};


/**
 * optional bool gs = 103;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getGs = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 103, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setGs = function(value) {
  jspb.Message.setField(this, 103, value);
};


/**
 * optional bool ias = 104;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getIas = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 104, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setIas = function(value) {
  jspb.Message.setField(this, 104, value);
};


/**
 * optional bool tas = 105;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getTas = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 105, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setTas = function(value) {
  jspb.Message.setField(this, 105, value);
};


/**
 * optional bool mach = 106;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getMach = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 106, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setMach = function(value) {
  jspb.Message.setField(this, 106, value);
};


/**
 * optional bool track = 107;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getTrack = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 107, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setTrack = function(value) {
  jspb.Message.setField(this, 107, value);
};


/**
 * optional bool track_rate = 108;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getTrackRate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 108, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setTrackRate = function(value) {
  jspb.Message.setField(this, 108, value);
};


/**
 * optional bool roll = 109;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getRoll = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 109, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setRoll = function(value) {
  jspb.Message.setField(this, 109, value);
};


/**
 * optional bool mag_heading = 110;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getMagHeading = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 110, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setMagHeading = function(value) {
  jspb.Message.setField(this, 110, value);
};


/**
 * optional bool true_heading = 111;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getTrueHeading = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 111, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setTrueHeading = function(value) {
  jspb.Message.setField(this, 111, value);
};


/**
 * optional bool baro_rate = 112;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getBaroRate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 112, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setBaroRate = function(value) {
  jspb.Message.setField(this, 112, value);
};


/**
 * optional bool geom_rate = 113;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getGeomRate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 113, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setGeomRate = function(value) {
  jspb.Message.setField(this, 113, value);
};


/**
 * optional bool squawk = 114;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getSquawk = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 114, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setSquawk = function(value) {
  jspb.Message.setField(this, 114, value);
};


/**
 * optional bool emergency = 115;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getEmergency = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 115, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setEmergency = function(value) {
  jspb.Message.setField(this, 115, value);
};


/**
 * optional bool nav_qnh = 116;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getNavQnh = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 116, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setNavQnh = function(value) {
  jspb.Message.setField(this, 116, value);
};


/**
 * optional bool nav_altitude_mcp = 117;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getNavAltitudeMcp = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 117, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setNavAltitudeMcp = function(value) {
  jspb.Message.setField(this, 117, value);
};


/**
 * optional bool nav_altitude_fms = 118;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getNavAltitudeFms = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 118, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setNavAltitudeFms = function(value) {
  jspb.Message.setField(this, 118, value);
};


/**
 * optional bool nav_heading = 119;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getNavHeading = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 119, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setNavHeading = function(value) {
  jspb.Message.setField(this, 119, value);
};


/**
 * optional bool nav_modes = 120;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getNavModes = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 120, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setNavModes = function(value) {
  jspb.Message.setField(this, 120, value);
};


/**
 * optional bool lat = 121;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getLat = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 121, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setLat = function(value) {
  jspb.Message.setField(this, 121, value);
};


/**
 * optional bool lon = 122;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getLon = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 122, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setLon = function(value) {
  jspb.Message.setField(this, 122, value);
};


/**
 * optional bool nic = 123;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getNic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 123, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setNic = function(value) {
  jspb.Message.setField(this, 123, value);
};


/**
 * optional bool rc = 124;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getRc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 124, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setRc = function(value) {
  jspb.Message.setField(this, 124, value);
};


/**
 * optional bool nic_baro = 125;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getNicBaro = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 125, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setNicBaro = function(value) {
  jspb.Message.setField(this, 125, value);
};


/**
 * optional bool nac_p = 126;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getNacP = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 126, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setNacP = function(value) {
  jspb.Message.setField(this, 126, value);
};


/**
 * optional bool nac_v = 127;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getNacV = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 127, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setNacV = function(value) {
  jspb.Message.setField(this, 127, value);
};


/**
 * optional bool sil = 128;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getSil = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 128, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setSil = function(value) {
  jspb.Message.setField(this, 128, value);
};


/**
 * optional bool sil_type = 129;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getSilType = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 129, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setSilType = function(value) {
  jspb.Message.setField(this, 129, value);
};


/**
 * optional bool gva = 130;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getGva = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 130, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setGva = function(value) {
  jspb.Message.setField(this, 130, value);
};


/**
 * optional bool sda = 131;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AircraftMeta.ValidSource.prototype.getSda = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 131, false));
};


/** @param {boolean} value  */
proto.AircraftMeta.ValidSource.prototype.setSda = function(value) {
  jspb.Message.setField(this, 131, value);
};


